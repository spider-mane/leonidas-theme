#!/usr/bin/env php
<?php

use Laravel\Prompts\TextPrompt;
use WebTheory\Erector\Action\AutoloadDumper;
use WebTheory\Erector\Action\DirectoryKeeper;
use WebTheory\Erector\Action\FileCopier;
use WebTheory\Erector\Action\FileRemover;
use WebTheory\Erector\Action\FileTransformer;
use WebTheory\Erector\Action\FilenameChanger;
use WebTheory\Erector\Action\GitInitiator;
use WebTheory\Erector\Action\Message;
use WebTheory\Erector\BaseResolver;
use WebTheory\Erector\Builder;
use WebTheory\Erector\CallableReplacements;
use WebTheory\Erector\LaravelPrompt;
use WebTheory\Erector\Transformation\JsonMerger;
use WebTheory\Erector\Transformation\TextReplacer;

$root = dirname(__DIR__, 1);

################################################################################
# Setup
################################################################################

if (!isset($__prefill__)) {
  if (!shell_exec("composer run setup -d {$root} --ansi")) {
    exit;
  }
}

require_once $root . '/tests/bootstrap.php';

################################################################################
# Prompt
################################################################################

// allow defaults to be passed to script for testing
$authorName = $authorName ?? trim(shell_exec('git config user.name'));
$authorEmail = $authorEmail ?? trim(shell_exec('git config user.email'));
$themeSlug = $themeSlug ?? strtolower(preg_replace('/[^A-Za-z0-9-]+/', '-', basename($root)));
$themeName = $themeName ?? ucwords(str_replace(['-', '_'], ' ', basename($root)));
$themeNamespace = $themeNamespace ?? str_replace('-', '_', $themeSlug);

$authorGithub = $authorGithub ?? '';
$themePrefix = $themePrefix ?? '';
$themeDescription = $themeDescription ?? '';
$themeVersion = $themeVersion ?? '0.1.0';
$psr4Namespace = $psr4Namespace ?? 'Theme';

$fields = [
  'author_name' => new TextPrompt('Author name', '', $authorName),
  'author_email' => new TextPrompt('Author email address', '', $authorEmail),
  'author_github_username' => new TextPrompt('Author Github username', '<username> in https://github.com/username', $authorGithub),
  'author_website' => new TextPrompt('Author website', '', 'https://github.com/{author_github_username}'),

  'vendor_name' => new TextPrompt('Vendor name', '', '{author_github_username}'),
  'vendor_github' => new TextPrompt('Vendor Github username', '<username> in https://github.com/username', '{vendor_name}'),
  'vendor_website' => new TextPrompt('Vendor website', '', 'https://github.com/{vendor_name}'),

  'theme_name' => new TextPrompt('Theme name', '', $themeName),
  'theme_slug' => new TextPrompt('Theme slug (textdomain)', '', $themeSlug),
  'theme_namespace' => new TextPrompt('Theme namespace', 'Key-like string to namespace values and contexts', $themeNamespace),
  'theme_prefix' => new TextPrompt('Theme prefix', 'Abbreviated shorthand ideally 3-5 characters', $themePrefix),
  'theme_version' => new TextPrompt('Theme version', '', $themeVersion),
  'theme_website' => new TextPrompt('Theme website', '', 'https://github.com/{vendor_github}/{theme_slug}'),
  'theme_description' => new TextPrompt('Brief description of theme', '', $themeDescription),

  'psr4_namespace' => new TextPrompt('PSR-4 namespace', 'Theme', $psr4Namespace),
];

$consent = 'Modify files with these values and create new git repository?';

################################################################################
# Configurations
################################################################################

$stubDirName = '__prefill__';
$stubs = $root . '/' . $stubDirName;
$replacementsDir = '@replacements';
$replacements = $stubs . '/' . $replacementsDir;

$updates = [
  // combinations
  ':vendor_name\\\\:theme_name\\\\' => function ($values) {
    return str_replace('\\', '\\\\', $values['psr4_namespace']) . '\\\\';
  },
  'PseudoVendor\\\\PseudoTheme\\\\' => function ($values) {
    return str_replace('\\', '\\\\', $values['psr4_namespace']) . '\\\\';
  },
  'PseudoVendor\\PseudoTheme' => 'psr4_namespace',

  // code
  'PseudoTheme' => function ($values) {
    return str_replace(['-', '_'], '', str_replace(['_', '-', ' '], '', ucwords($values['theme_name'])));
  },
  'PseudoVersion' => function ($values) {
    return str_replace('.', '_', $values['theme_version']);
  },
  'PSEUDO_THEME' => function ($values) {
    return str_replace('-', '_', strtoupper($values['theme_slug']));
  },

  // plaintext
  'Pseudo Theme' => 'theme_name',
  'pseudo-theme' => 'theme_slug',
  'leonidas-theme' => 'theme_slug',

  // placeholders
  ':theme_namespace' => 'theme_namespace',
  ':theme_name' => 'theme_name',
  ':theme_slug' => 'theme_slug',
  ':theme_prefix' => 'theme_prefix',
  ':theme_version' => 'theme_version',
  ':theme_website' => 'theme_website',
  ':theme_description' => 'theme_description',
  ':theme_author' => 'author_name',
  ':author_username' => 'author_github_username',
  ':author_website' => 'author_website',
  ':author_email' => 'author_email',
  ':vendor_name' => 'vendor_name',
  ':vendor_website' => 'vendor_website',
  ':vendor_github' => 'vendor_github',
  ':system_year' => fn () => date('Y'),
];

$boilerplate = array_merge(
  // files
  array_map(fn ($file) => $root . $file, [
    // theme
    '/functions.php',
    '/style.css',

    // bin
    '/bin/apprun',
    '/bin/enterapp',

    // docker
    '/.devcontainer/devcontainer.json',
    '/docker-compose.override.example.yml',
    '/docker/php/Dockerfile',

    // misc
    '/.mailmap',
    '/.php-cs-fixer.dist.php',
    '/phpcs.xml.dist',
    '/wp-cli.yml',
  ]),

  // stubs
  ...array_map(fn ($file) => glob($stubs . $file . '/*'), [
    '/' . $replacementsDir,
  ]),

  // globs
  ...array_map(fn ($file) => glob($root . $file), [
    // php
    '/app/*.php',
    '/app/**/*.php',
    '/app/**/**/*.php',
    '/app/**/**/**/*.php',
    '/boot/*.php',
    '/boot/development/*.php',
    '/config/*.php',
    '/config/development/*.php',
    '/theme/*.php',
    '/theme/**/*.php',
    '/theme/**/**/*.php',
    '/tests/*.php',
    '/tests/**/*.php',
    '/tests/**/**/*.php',
  ]),
);

// files whose output target is not in the root directory
$locations = [
  'package.json' => 'assets'
];

// files where user input needs to be further refined
$filters = [
  $root . '/config/app.php' => function ($values) {
    $values['theme_description'] = addslashes($values['theme_description']);

    return $values;
  }
];

// json files whose contents should be merged with a functional counterpart
$json = [
  'composer.json' => function (array $base, array $stub): array {
    $composer = array_replace_recursive($base, $stub);

    $composer['authors'] = $stub['authors'];
    $composer['keywords'] = $stub['keywords'];
    $composer['autoload']['psr-4'] = $stub['autoload']['psr-4'];

    $scripts = $composer['scripts'];

    unset(
      $scripts['post-create-project-cmd'],
      $scripts['fill']
    );

    $composer['scripts'] = $scripts;

    return $composer;
  },

  'assets/package.json' => function (array $base, array $stub): array {
    $package = array_replace_recursive($base, $stub);

    return $package;
  },
];

// files to rename
$rename = [
  '.stub.gitattributes' => fn () => '.gitattributes',
  'assets/.stub.gitattributes' => fn () => '.gitattributes',
];

// files to copy to root directory
$copy = [];

// files to delete
$remove = [
  $stubDirName,
  'bin/composer-prefill',
  'bin/prefill',
  'bin/testprefill',
  'bin/testproject',
  'bin/.gitattributes',
  'prefill',
];

$keep = [
  'bin',
];

$message = "Done! \e[1;37;44m#StandWith\e\e[0;30;43mUkraine\e[0m\n";

################################################################################
# Process
################################################################################

$updates = new CallableReplacements($updates);
$baseResolver = new BaseResolver($locations, $root, $replacements);

$builder = new Builder(
  new GitInitiator(),
  new FileTransformer(
    $boilerplate,
    $filters,
    $baseResolver,
    new TextReplacer($updates),
    new JsonMerger($root, $json),
  ),
  new FilenameChanger(new CallableReplacements($rename)),
  new AutoloadDumper(),
  new FileRemover(...$remove),
  new FileCopier(...$copy),
  new DirectoryKeeper(...$keep),
  new Message($message)
);

$builder->build($root, new LaravelPrompt($fields, $consent));
